trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
# The following two lines was autogenerated by Azure Pipelines,
# but replaced by the tasks below to include testing.
# - script: dotnet build --configuration $(buildConfiguration)
#  displayName: 'dotnet build $(buildConfiguration)'

# Test
#- task: DotNetCoreCLI@2
#  displayName: Testing
#  inputs:
#    command: test
#    projects: '**/*Tests/*.csproj'
#    arguments: '--configuration $(buildConfiguration)'

# Prepare Analysis Configuration task
#- task: SonarQubePrepare@5
#  inputs:
#    SonarQube: 'YourSonarqubeServerEndpoint'
#    scannerMode: 'MSBuild'
#    projectKey: 'YourProjectKey'

# Run Code Analysis task
#- task: SonarQubeAnalyze@5

# Publish Quality Gate Result task
#- task: SonarQubePublish@5
#  inputs:
#    pollingTimeoutSec: '300'

# Build
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)' # Update this to match your need

# Run the Web API in the background
- task: CmdLine@2
  displayName: Run the WebApi in the background
  inputs:
    script: 'dotnet $(Build.SourcesDirectory)/HotelBooking.WebApi/bin/$(buildConfiguration)/net6.0/HotelBooking.WebApi.dll &'

# Install Newman
- task: Npm@1
  displayName: Install Newman
  inputs:
    command: 'custom'
    customCommand: 'install newman -g'

#Run Postman tests
- task: CmdLine@2
  displayName: Run Postman tests
  inputs:
    script: 'newman run $(Build.SourcesDirectory)/Postman/HotelBooking.postman_collection.json -k -r cli --folder tests'
    