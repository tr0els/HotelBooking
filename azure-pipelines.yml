trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
# The following two lines was autogenerated by Azure Pipelines,
# but replaced by the tasks below to include testing.
# - script: dotnet build --configuration $(buildConfiguration)
#  displayName: 'dotnet build $(buildConfiguration)'

- task: SonarCloudPrepare@1
  inputs:
    SonarCloud: 'KleinNorre SonarCloud'
    organization: 'troelz'
    scannerMode: 'MSBuild'
    projectKey: 'troelz_HotelBooking'
    projectName: 'HotelBooking'
    extraProperties: |
      sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/coverlet/reports/coverage.xml
      
# Build
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)' # Update this to match your need

# Test
- task: DotNetCoreCLI@2
  displayName: Testing
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover' # Collect data using Coverlet DataCollector
    workingDirectory: $(Build.SourcesDirectory)
    
#- task: DotNetCoreCLI@2
#  inputs:
#    command: custom
#    custom: tool
#    arguments: install --tool-path . dotnet-reportgenerator-globaltool
#  displayName: Install ReportGenerator tool

#- script: ./reportgenerator -reports:$(Agent.TempDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverlet/reports -reporttypes:"Cobertura"
#  displayName: Create reports
  
# Generate report from collected data
- task: reportgenerator@5
  inputs:
    reports: $(Agent.TempDirectory)/**/coverage.opencover.xml
    targetdir: $(Build.SourcesDirectory)/coverlet/reports
    # reporttypes: 'HtmlInline_AzurePipelines;Cobertura;SonarQube'

# Publish code results
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: OpenCover
    summaryFileLocation: $(Build.SourcesDirectory)/coverlet/reports/coverage.xml

# SonarCloud Run Code Analysis
- task: SonarCloudAnalyze@1

# SonarCloud Publish Quality Gate Result
- task: SonarCloudPublish@1
  inputs:
    pollingTimeoutSec: '300'

# Run the Web API in the background
- task: CmdLine@2
  displayName: Run the WebApi in the background
  inputs:
    script: 'dotnet $(Build.SourcesDirectory)/HotelBooking.WebApi/bin/$(buildConfiguration)/net6.0/HotelBooking.WebApi.dll &'

# Install Newman
- task: Npm@1
  displayName: Install Newman
  inputs:
    command: 'custom'
    customCommand: 'install newman -g'

#Run Postman tests
- task: CmdLine@2
  displayName: Run Postman tests
  inputs:
    script: 'newman run $(Build.SourcesDirectory)/Postman/HotelBooking.postman_collection.json -k -r cli --folder tests'
    
